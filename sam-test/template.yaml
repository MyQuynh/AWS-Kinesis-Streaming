AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-test

  Sample SAM Template for sam-test

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 128
    Timeout: 900

Parameters:
  FirehoseS3Prefix:
    Type: String
    Default: firehose/
    Description: "The S3 Key prefix for Kinesis Firehose."
  FirehoseS3PrefixTwitter:
    Type: String
    Default: twitter/
    Description: "The S3 Key prefix for Kinesis Firehose Twitter."
  FirehoseS3Prefix2:
    Type: String
    Default: firehose2/
    Description: "The S3 Key prefix for Kinesis Firehose specific"
  FirehoseCompressionFormat:
    Type: String
    Default: GZIP
    AllowedValues: [UNCOMPRESSED, GZIP, Snappy]
    Description: "Compression format used by Kinesis Firehose"
  FirehoseBufferingInterval:
    Type: Number
    Default: 60
    MinValue: 60
    MaxValue: 900
    Description: "How long Firehose will wait before writing a new batch into S3"
  FirehoseBufferingSize:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 128
    Description: "Maximum batch size in MB"
  AthenaDatabaseName:
    Type: String
    Default: serverless_data_pipeline
    Description: "The Athena database name"
  AthenaTableName:
    Type: String
    Default: records
    Description: "The Athena table name"

Resources:

  IngestDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["ingest.handler"]
      MemorySize: 1536
      Timeout: 900
      Policies:
        - FirehoseCrudPolicy:
            DeliveryStreamName: !Ref DeliveryStream
      Events:
        CheckWebsiteScheduledEvent1:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
    Metadata:
      DockerTag: python3.8-v1
      DockerContext: ./src/handlers/IngestImageData
      Dockerfile: Dockerfile
  
  IngestTwitterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["ingestTwitter.handler"]
      MemorySize: 1536
      Timeout: 500
      Policies:
        - FirehoseCrudPolicy:
            DeliveryStreamName: !Ref DeliveryStreamTwitter
      Events:
        CheckWebsiteScheduledEvent1:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
    Metadata:
      DockerTag: python3.8-v2
      DockerContext: ./src/handlers/IngestTweet
      Dockerfile: Dockerfile

  # IngestDataFunction:
  #   Type: AWS::Serverless::Function
  #   Metadata:
  #     BuildMethod: makefile
  #   Properties:
  #     Handler: ingest.lambda_handler
  #     Policies:
  #       - FirehoseCrudPolicy:
  #           DeliveryStreamName: !Ref DeliveryStream
  #     Events:
  #       CheckWebsiteScheduledEvent:
  #         Type: Schedule
  #         Properties:
  #           Schedule: rate(30 minutes)
  
  IngestDataFunction2:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["ingest3.handler"]
      MemorySize: 1536
      Timeout: 500
      Policies:
        - FirehoseCrudPolicy:
            DeliveryStreamName: !Ref DeliveryStream2
      Events:
        CheckWebsiteScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
    Metadata:
      DockerTag: python3.8-v3
      DockerContext: ./src/handlers/IngestImageSpecificData
      Dockerfile: Dockerfile
  
  GetPredictTextFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["predictText.handler"]
      Events:
        GetPredictTextAPI:
          Type: Api
          Properties:
            Path: /predictText
            Method: post
    Metadata:
      DockerTag: python3.8-v4
      DockerContext: ./src/handlers/PredictText
      Dockerfile: Dockerfile
    
  GetPredictTextUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["predictTextUrl.handler"]
      Events:
        GetPredictTextAPI:
          Type: Api
          Properties:
            Path: /predictTextUrl
            Method: post
    Metadata:
      DockerTag: python3.8-v5
      DockerContext: ./src/handlers/PredictTextUrl
      Dockerfile: Dockerfile
  
  GetPredictImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        Command: ["predictImage.handler"]
      Events:
        GetPredictImageAPI:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /predictImage
            Method: post
    Metadata:
      DockerTag: python3.8-v6
      DockerContext: ./src/handlers/PredictImage
      Dockerfile: Dockerfile


  # IngestTwitterDataFunction:
  #   Type: AWS::Serverless::Function
  #   Metadata:
  #     BuildMethod: makefile
  #   Properties:
  #     # Layers:
  #     #   - !Ref RuntimeDependenciesLayer
  #     #   - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-python38-nltk:46
  #     #   - !Ref GensimLayer
  #     #   - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-python38-tweepy:1
  #     #   - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-python38-numpy:20
  #     #   - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-python38-scipy:1
  #     Handler: ingestTwitter.lambda_handler
  #     Policies:
  #       - FirehoseCrudPolicy:
  #           DeliveryStreamName: !Ref DeliveryStreamTwitter
  #     Events:
  #       CheckWebsiteScheduledEvent:
  #         Type: Schedule
  #         Properties:
  #           Schedule: rate(30 minutes)

  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties:
      DeliveryStreamName: "DeliveryStream"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        Prefix: !Ref FirehoseS3Prefix
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref S3Records
        BufferingHints:
          IntervalInSeconds: !Ref FirehoseBufferingInterval
          SizeInMBs: !Ref FirehoseBufferingSize
        CompressionFormat: !Ref FirehoseCompressionFormat
        RoleARN: !GetAtt DeliveryStreamRole.Arn
  
  DeliveryStreamTwitter:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties:
      DeliveryStreamName: "DeliveryStreamTwitter"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        Prefix: !Ref FirehoseS3PrefixTwitter
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref S3Records
        BufferingHints:
          IntervalInSeconds: !Ref FirehoseBufferingInterval
          SizeInMBs: !Ref FirehoseBufferingSize
        CompressionFormat: !Ref FirehoseCompressionFormat
        RoleARN: !GetAtt DeliveryStreamRole.Arn
  
  DeliveryStream2:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties:
      DeliveryStreamName: "DeliveryStream2"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        Prefix: !Ref FirehoseS3Prefix2
        BucketARN: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref S3Records
        BufferingHints:
          IntervalInSeconds: !Ref FirehoseBufferingInterval
          SizeInMBs: !Ref FirehoseBufferingSize
        CompressionFormat: !Ref FirehoseCompressionFormat
        RoleARN: !GetAtt DeliveryStreamRole.Arn

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  
  DeliveryStreamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeliveryStreamRole
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Records
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Records
                  - '*'

  S3Records:
    Type: AWS::S3::Bucket
  
  MyRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "test-repository-1"
      ImageScanningConfiguration: 
        ScanOnPush: "true"
  
  MyRepository2: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "test-repository-2"
      ImageScanningConfiguration: 
        ScanOnPush: "true"

  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
        BuildMethod: makefile
    Properties:
      LayerName: "kenesis-dependencies"
      Description: Python Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Retain

  # TfRuntimeLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: TfRuntime
  #     Description: TF Runtime Layer
  #     ContentUri: layers/tensorflow/
  #     CompatibleRuntimes:
  #       - python3.8
  #     RetentionPolicy: Retain
  #   Metadata:
  #     BuildMethod: python3.8

  GensimLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: Gensim
      Description: Gensim Layer
      ContentUri: layers/gensim/
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile
  
  # ScipyLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: Scipy
  #     Description: Scipy Layer
  #     ContentUri: layers/scipy/
  #     CompatibleRuntimes:
  #       - python3.8
  #     RetentionPolicy: Retain
  #   Metadata:
  #     BuildMethod: makefile

  # # DynamoTable:
  # #   Type: AWS::DynamoDB::Table
  # #   Properties:
  # #     AttributeDefinitions:
  # #       -
  # #         AttributeName: "id"
  # #         AttributeType: "S"
  # #       -
  # #         AttributeName: "date"
  # #         AttributeType: "S"
  # #     KeySchema:
  # #       -
  # #         AttributeName: "id"
  # #         KeyType: "HASH"
  # #       -
  # #         AttributeName: "date"
  # #         KeyType: "RANGE"
  # #     ProvisionedThroughput:
  # #       ReadCapacityUnits: "1"
  # #       WriteCapacityUnits: "1"
  # #     TableName: "DynamoTable"
  
  # DDBFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ddb/
  #     Policies:
  #       - DynamoDBCrudPolicy: {TableName: !Ref DDBRecords}
  #     Environment:
  #       Variables:
  #         TABLE: !Ref DDBRecords
  #     Events:
  #       Stream:
  #         Type: Kinesis
  #         Properties:
  #           Stream: !GetAtt DDBConsumer.ConsumerARN
  #           StartingPosition: LATEST
  #           BatchSize: 100
  
  # S3Function:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: s3/
  #     Policies:
  #       - S3CrudPolicy: {BucketName: !Ref S3Records}
  #     Environment:
  #       Variables:
  #         BUCKET: !Ref S3Records
  #     Events:
  #       Stream:
  #         Type: Kinesis
  #         Properties:
  #           Stream: !GetAtt S3Consumer.ConsumerARN
  #           StartingPosition: LATEST
  #           BatchSize: 100


  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: post

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  
  BucketName:
    Description: The bucket where data will be stored
    Value: !Ref S3Records
